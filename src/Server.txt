import React, { useState, useEffect, useCallback } from 'react';
import { BrowserRouter, Routes, Route, useLocation } from 'react-router-dom';
import './App.css';
import Navbar from './components/Navbar/Navbar';
import Footer from './components/Footer/Footer';
import { animateScroll as scroll } from 'react-scroll';
import Main from './pages/Main';
import ProjectList from './pages/ProjectList';
import ProjectDisplay from './pages/ProjectDisplay';

const ScrollToTop = () => {
  const { pathname } = useLocation();

  useEffect(() => {
    scroll.scrollToTop();
  }, [pathname]);

  return null;
};

const App = () => {
  const [showScroll, setShowScroll] = useState(false);
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const checkScrollTop = useCallback(() => {
    setShowScroll(window.pageYOffset > 400);
  }, []);

  const scrollTop = () => {
    scroll.scrollToTop();
  };

  useEffect(() => {
    window.addEventListener('scroll', checkScrollTop);
    return () => {
      window.removeEventListener('scroll', checkScrollTop);
    };
  }, [checkScrollTop]);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const response = await fetch('http://localhost:3000/projectdata');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setProjects(data);
      } catch (error) {
        setError(error);
      } finally {
        setLoading(false);
      }
    };

    fetchProjects();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error.message}</div>;
  }

  return (
    <div className="app-container">
      <BrowserRouter>
        <ScrollToTop />
        <Navbar />
        <Routes>
          <Route path='React-Own-Portfolio/' element={<Main />} />
          <Route path='/projects' element={<ProjectList projects={projects} />} />
          <Route path='/project/:projectId' element={<ProjectDisplay projects={projects} />} />
        </Routes>
        <Footer />
      </BrowserRouter>
      <div className={`scroll-to-top ${showScroll ? 'show' : ''}`} onClick={scrollTop}>
        &#9650;
      </div>
    </div>
  );
}

export default App;
